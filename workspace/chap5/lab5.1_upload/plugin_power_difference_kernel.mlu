/*************************************************************************
 * Copyright (C) [2018] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/
// TODO：PowerDifference BCL单核实现
#define ONELINE 256

__mlu_entry__ void PowerDifferenceKernel(half *input1, half *input2, int pow, half *output, int len)
{
  if (taskId > 0) return;
  // TODO：循环条件判断
  int quotient = len / ONELINE; //计算拆分数
  __bang_printf("pow = %d, len = %d\n", pow, len);
  int rem = len % ONELINE; //余数

  // TODO：内存申请
  __nram__ half input1_nram[ONELINE];
  __nram__ half input2_nram[ONELINE];

  // TODO：For循环计算
  int i;
  for (i = 0; i < quotient; i++)
  {
    // TODO：拷入操作
    __memcpy(input1_nram, input1 + i * ONELINE, ONELINE * sizeof(half), GDRAM2NRAM);
    __memcpy(input2_nram, input2 + i * ONELINE, ONELINE * sizeof(half), GDRAM2NRAM);

    // TODO：实际计算部分
    __bang_sub(input1_nram, input1_nram, input2_nram, ONELINE); //相减，存入1中
    __memcpy(input2_nram, input1_nram, ONELINE * sizeof(half), NRAM2NRAM); //拷贝数据到2中

    for(int i = 0; i < pow - 1; i++){
      //按元素乘
      __bang_mul(input1_nram, input1_nram, input2_nram, ONELINE);
    }

    // TODO：结果拷出操作
    __memcpy(output + i * ONELINE, input1_nram, ONELINE * sizeof(half), NRAM2GDRAM); //计算结果储存在input1_nram中
  }

  // 余数部分计算
  if(rem != 0){
    __memcpy(input1_nram, input1 + i * ONELINE, rem * sizeof(half), GDRAM2NRAM);
    __memcpy(input2_nram, input2 + i * ONELINE, rem * sizeof(half), GDRAM2NRAM);

    __bang_sub(input1_nram, input1_nram, input2_nram, rem); 
    __memcpy(input2_nram, input1_nram, rem * sizeof(half), NRAM2NRAM); 

    for(int i = 0; i < pow - 1; i++){
      __bang_mul(input1_nram, input1_nram, input2_nram, rem);
    }

    __memcpy(output + i * ONELINE, input1_nram, rem * sizeof(half), NRAM2GDRAM);
  }
}
